;BASICH
;FUNCTIONS AND ONCE ONLY CODE
;
        .TITLE BASICH
;
        R0=%0
        R1=%1
        R2=%2
        R3=%3
        R4=%4
        R5=%5
        SP=%6
        PC=%7
;
;GLOBAL'S DEFINED IN BASICH
;
        .GLOBL USRARE
;
;GOLBAL'S DEFINED IN BASICL
;
        .GLOBL SAVCHA,VAL,NORM,EVAL
        .GLOBL OPERAT,ERRSX5,ERRARG,FLTOFX
        .GLOBL ARGB,SOPRAT,INT,NUMSGN
        .GLOBL MAKEST,QUOTBM,TABLE5,TBL5EN
        .GLOBL START,HICORE,.RPRN,.COMA
;
;GLOBALS DEFINED IN FPMP11
;
        .GLOBL IFPMP
;
; ASSEMBLY PARAMETERS
	.IFNDF $TPBSZ
$TPBSZ	=	20	;TELEPRINTER BUFFER SIZE
	.ENDC
	.IFNDF $KBBSZ
$KBBSZ	=	20	;KEYBOARD BUFFER SIZE
	.ENDC
	.IFNDF $ULNSP
$ULNSP	=	120	;USER LINE SPACE
	.ENDC
;
;	$NOSTR = 1	;no string support
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;USER AREA OFFSETS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SYMBLS =0        ;
LIMIT  =SYMBLS+2 ;
PDL    =LIMIT+2  ;
PDSIZE =PDL+2    ;
ARRAYS =PDSIZE+2 ;
HIFREE =ARRAYS+2 ;
LOFREE =HIFREE+2 ;
CODE   =LOFREE+2 ;
LINE   =CODE+2   ;
VARSAV =LINE+2   ;
SS1SAV =VARSAV+2 ;
SS2SAV =SS1SAV+2 ;
LINENO =SS2SAV+2 ;
GSBCTR =LINENO+2 ;
COLUMN =GSBCTR+2 ;
CLMNTT =COLUMN+2 ;
FAC1   =CLMNTT+2 ;
FAC2   =FAC1+2   ;
R0SAVE =FAC2+2   ;
R1SAVE =R0SAVE+2 ;
R2SAVE =R1SAVE+2 ;
R3SAVE =R2SAVE+2 ;
R4SAVE =R3SAVE+2 ;
T1     =R4SAVE+2 ;
T2     =T1+2     ;
T3     =T2+2     ;
RND1   =T3+2     ;
RND2   =RND1+2   ;
RNDCT  =RND2+2   ;
LOSTR  =RNDCT+2  ;
HISTR  =LOSTR+2  ;
ODEV   =HISTR+2  ;
IDEV   =ODEV+1   ;
TPHD   =IDEV+1   ;
KBHD   =TPHD+2   ;
ECHOSP =KBHD+2   ;
CNCFLG =ECHOSP+2 ;
CNOFLG =CNCFLG+1 ;
FILLCO =CNOFLG+1 ;
FILLNO =FILLCO+1 ;
FILLCH =FILLNO+1 ;
XOFFLG =FILLCH+1 ;
;
;ASSORTED CONSTANTS
;
CRET = 15
SPACE = 40
MAXCOL = 110
;
TKS = 177560    ;TELEPRINTER KEYBOARD STATUS
TKB = 177562    ;TELEPRINTER KEYBOARD BUFFER
TPS = 177564    ;TELEPRINTER PRINTER STATUS
TPB = 177566    ;TELEPRINTER PRINTER BUFFER

        .CSECT
;
USRARE: .WORD 0
;
BASICH:
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: RND
;FUNCTION: RNDL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RNDLFN: JSR PC,@#EVAL		;EVALUATE ARGUMENT
        BCS ERRNDA		;BAD ARG?
        CMPB(R1)+,#.RPRN	;CHECK FOR ')'
        BNE ERRNDS		;SYNTAX ERROR?
RNDFN:  MOV R5,R0
        ADD #66,R0
        MOV(R0),R3
        MOV -(R0),R2
        ASL R3
        ROL R2
        ADD(R0)+,R2
        ADD(R0),R3
        ADC R2
        ADD(R0),R2
        BPL RPLUS
        ADD #100000,R2
RPLUS:  MOV R3,(R0)
        MOV R2,-(R0)
        MOV #201,R0
RNORM:  ASL R3
        ROL R2
        BCS REXP
        DEC R0
        BR RNORM
REXP:   CLRB R3
        BISB R2,R3
        SWAB R3
        CLRB R2
        BISB R0,R2
        SWAB R2
        ROR R2
        ROR R3
        MOV R2,FAC1(R5)		;PUT RESULT IN FAC
        MOV R3,FAC2(R5)
        JMP @#OPERAT		;RETURN RESULT
ERRNDS: JMP @#ERRSX5
ERRNDA: JMP @#ERRARG
RNDFNE:
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: PEEK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PEEKFN: JSR PC,@#FLTOFX
        CMPB(R1)+,#.RPRN	;SYNTAX CHECK
        BNE ERPEKS
        MOV #4,R2		;POINT TO BUS ERROR VECTOR
        MOV(R2),-(SP)		;SAVE OLD VALUE
        MOV PC,(R2)
        ADD #26,(R2)		;POINT TO TIMEOUT HANDLER
        MOVB @FAC2(R5),R0	;ATTEMPT TO READ LOCATION
        BIC #177400,R0		;MASK TO 8 BITS
PEEK01: MOV R0,FAC2(R5)		;PUT IN FAC (RETURN VALUE)
        MOV(SP)+,(R2)		;RESET TIMEOUT HANDLER
        JMP @#OPERAT
;
;BUS TIMEOUT ON PEEK
ERRPEK: DEC R0
        CMP(SP)+,(SP)+		;CLEAN UP STACK
        BR PEEK01		;CONTINUE
;
ERPEKA: JMP @#ERRARG
ERPEKS: JMP @#ERRSX5
PEKFNE:
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: FRE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FREFN:  JSR PC,@#FLTOFX		;ARG TO FIXED POINT
        CMPB(R1)+,#.RPRN	;CHECK FOR ')'
        BNE ERFRES
        CLR FAC1(R5)		;CLEAR HI WORD
        CLR R0
        MOV HIFREE(R5),R0	;GET TOP OF FREE
        SUB LOFREE(R5),R0	;SUB BOTTOM
        ADD LOSTR(R5),R0	;CORRECT FOR STRING SPACE
        SUB HISTR(R5),R0
        MOV R0,FAC2(R5)		;MOVE TO FP ACCUM
        JMP @#OPERAT		;RETURN RESULT
ERFRES: JMP @#ERRSX5
FREFNE:
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: ABS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ABSFN:  JSR PC,@#EVAL		;EVAL ARGUMENT
        BCS ERABSA		;BAD ARG?
        CMPB(R1)+,#.RPRN	;CHECK FOR ')'
        BNE ERABSS		;BAD SYNTAX?
        TST FAC1(R5)
        BEQ ABSINT		;ZERO HI WORD?
        BPL ABSX		;ALREADY POS?
        BIC #100000,FAC1(R5)
        BR ABSX
ABSINT: TST FAC2(R5)		;TEST LO WORD
        BPL ABSX
        NEG FAC2(R5)		;NEGATE IT
        BVC ABSX
        MOV #44000,FAC1(R5)	;FIX SIGN
        CLR FAC2(R5)
ABSX:   JMP @#OPERAT		;RETURN VALUE
ERABSA: JMP @#ERRARG
ERABSS: JMP @#ERRSX5
ABSFNE:
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: SGN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SGNFN:  JSR PC,@#EVAL
        BCS ERSGNA
        CMPB(R1)+,#.RPRN
        BNE ERSGNS
        CLR R0
        TST FAC1(R5)
        BNE SGNFLT
        TST FAC2(R5)
        BEQ SGNX
SGNFLT: BPL SGNPOS
        DEC R0
        BR .+4
SGNPOS: INC R0
        MOV R0,FAC2(R5)
        CLR FAC1(R5)
SGNX:   JMP @#OPERAT
ERSGNA: JMP @#ERRARG
ERSGNS: JMP @#ERRSX5
SGNFNE:
;
	.IFNDF $NOSTR
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: TAB
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TABFN:  JSR PC,@#ARGB		;EVALUATE BYTE ARGUMENT
        CMPB(R1)+,#.RPRN	;CHECK FOR ')'
        BNE ERTABS		;SYNTAX ERROR?
        CLR -(SP)
        MOVB FAC2(R5),(SP)	;GET DESIRED COLUMN
TABB:   CMP(SP),#MAXCOL		;PAST END OF LINE?
        BCS TABC
        SUB #MAXCOL,(SP)	;THEN SUB MAX COLUMN
        BR TABB
TABC:   SUB @COLUMN(R5),(SP)	;SUB CURRENT COLUMN
        BPL .+4			;ALREADY PAST?
        CLR(SP)
        BNE TABNON
        DEC(SP)
        BR TABNUL		;DO NOTHING
;
;MAKE A STRING AND PUT SPACES IN IT
TABNON: MOV R5,R2
        JSR PC,@#MAKEST		;MAKE A STRING
        MOV(SP),R0		;GET STRING POINTER
        CLR R2
        BISB(R0),R2		;SET STRING COUNT
        ADD #3,R0		;MOVE PAST STRING HEADER
        MOVB #SPACE,(R0)+	;ADD SPACE TO STRING
        DEC R2			;LOOP FOR MORE SPACES
        BGT .-6
TABNUL: JMP @#SOPRAT		;RETURN STRING
ERTABS: JMP @#ERRSX5
TABFNE:
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: LEN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LENFN:  JSR PC,@#EVAL
        BCC ERLENA
        CMPB(R1)+,#.RPRN
        BNE ERLENS
        CLR FAC1(R5)
        CLR FAC2(R5)
        MOV(SP)+,R2
        INC R2
        BEQ .+6
        MOVB -(R2),FAC2(R5)
        JMP @#OPERAT
ERLENA: JMP @#ERRARG
ERLENS: JMP @#ERRSX5
LENFNE:
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: ASC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASCFN:  JSR PC,@#EVAL
        BCC ERASCA
        CMPB(R1)+,#.RPRN
        BNE ERASCS
        MOV(SP)+,R2
        CMP R2,#177777
        BEQ ERASCA
        CMPB(R2),#1
        BNE ERASCA
        CLR FAC1(R5)
        CLR FAC2(R5)
        MOVB 3(R2),FAC2(R5)
        JMP @#OPERAT
ERASCA: JMP @#ERRARG
ERASCS: JMP @#ERRSX5
ASCFNE:
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: CHR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CHR$FN: JSR PC,@#ARGB		;EVAL ARGUMENT
        CMPB(R1)+,#.RPRN	;CHECK FOR ')'
        BNE ERCHRS
        BICB #200,FAC2(R5)
        MOV #1,-(SP)
        MOV R5,R2
        JSR PC,@#MAKEST		;MAKE STRING
        MOV(SP),R0
        MOVB FAC2(R5),3(R0)	;PUT CHAR IN STRING
        JMP @#SOPRAT		;RETURN STRING
ERCHRS: JMP @#ERRSX5
CHRFNE:
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: POS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
POSFN:  JSR PC,@#EVAL
        BCC ERPOSA
        CMPB(R1)+,#.COMA
        BNE ERPOSS
        JSR PC,@#EVAL
        BCC ERPOSA
        CMPB(R1)+,#.COMA
        BNE ERPOSS
        JSR PC,@#EVAL
        BCS ERPOSA
        JSR PC,@#INT
        CMPB(R1)+,#.RPRN
        BNE ERPOSS
        CLR R0
        TST FAC1(R5)
        BNE POSF
        TST FAC2(R5)
        BLE POSF
        BISB FAC2(R5),R0
        CMP 2(SP),#177777
        BNE POSX
        CLR R0
        BR POSF
POSX:   CLR R2
        BISB @2(SP),R2
        CMP(SP),#177777
        BNE POSY
        CMP R0,R2
        BLE POSF
        MOV R2,R0
        BR POSF
POSY:   CLR R3
        BISB @0(SP),R3
        ADD(SP),R3
        ADD #3,R3
        MOV R3,T2(R5)
        MOV(SP)+,R3
        ADD #3,R3
        ADD(SP),R2
        ADD #3,R2
        MOV R2,T1(R5)
        MOV(SP)+,R2
        ADD R0,R2
        ADD #2,R2
POSFST: CMPB(R3),(R2)+
        BEQ POSREM
POSTRY: INC R0
        CMP R2,T1(R5)
        BNE POSFST
        CLR R0
        BR POSF2
POSREM: MOV R2,-(SP)
        MOV R3,-(SP)
        INC R3
POSNXT: CMP R3,T2(R5)
        BEQ POSF
        CMP R2,T1(R5)
        BEQ POSNO
        CMPB(R2)+,(R3)+
        BEQ POSNXT
POSNO:  MOV(SP)+,R3
        MOV(SP)+,R2
        BR POSTRY
POSF:   CMP(SP)+,(SP)+
POSF2:  MOV R0,FAC2(R5)
        CLR FAC1(R5)
        JMP @#OPERAT
ERPOSA: JMP @#ERRARG
ERPOSS: JMP @#ERRSX5
POSFNE:
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: SEG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SEGFN:  JSR PC,@#EVAL
        BCC ERSEGA
        CMPB(R1)+,#.COMA
        BNE ERSEGS
        JSR PC,@#EVAL
        BCS ERSEGA
        JSR PC,@#INT
        MOV FAC1(R5),-(SP)
        MOV FAC2(R5),-(SP)
        CMPB(R1)+,#.COMA
        BNE ERSEGS
        JSR PC,@#EVAL
        BCS ERSEGA
        JSR PC,@#INT
        CMPB(R1)+,#.RPRN
        BNE ERSEGS
        MOV(SP)+,R2
        MOV(SP)+,R0
        BMI SEGXO
        BNE SEGNUL
        TST R2
        BGT SEGL
SEGXO:  MOV #1,R2
SEGL:   CLR R0
        CMP(SP),#177777
        BISB @000000(SP),R0
SEGTY:  TST FAC1(R5)
        BMI SEGNUL
        BEQ SEGTY2
        MOV R0,R3
        BR SEGRNG
SEGTY2: MOV FAC2(R5),R3
        BLE SEGNUL
SEGRNG: CMP R0,R3
        BHI SEGR2
        MOV R0,R3
SEGR2:  CMP R2,R3
        BHI SEGNUL
        SUB R2,R3
        INC R3
        MOV R2,-(SP)
        MOV R5,R2
        MOV R3,-(SP)
        JSR PC,@#MAKEST
        MOV(SP)+,R2
        MOV(SP)+,R0
        ADD(SP),R0
        MOV R2,(SP)
        CLR R3
        BISB(R2),R3
        ADD #3,R2
        ADD #2,R0
SEGLP:  MOVB(R0)+,(R2)+
        DEC R3
        BNE SEGLP
        JMP @#QUOTBM
SEGNUL: MOV #177777,(SP)
SEGX:   JMP @#SOPRAT
ERSEGA: JMP @#ERRARG
ERSEGS: JMP @#ERRSX5
SEGFNE:
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: VAL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
VALFN:  JSR PC,@#EVAL
        BCC ERVALA
        CMPB(R1)+,#.RPRN
        BNE ERVALS
        MOV(SP),R0
        CMP R0,#177777
        BNE VALR
        CLR FAC1(R5)
        CLR FAC2(R5)
        TST(SP)+
        BR VALJ
VALR:   CLR R2
        BISB(R0),R2
        MOV R2,(SP)
        ADD #3,R0
        ADD R0,R2
        CLRB(R2)
        MOV R4,-(SP)
        MOV R1,-(SP)
        MOV R2,-(SP)
        JSR PC,@#VAL
        JSR PC,@#NORM
        MOV R3,FAC1(R5)
        MOV R4,FAC2(R5)
VALCE:  TSTB(R0)
        BEQ VALX
        CMPB(R0)+,#40
        BEQ VALCE
VALX:   CMP R0,(SP)+
        BNE ERVALA
        MOV(SP)+,R1
        MOV(SP)+,R4
        MOV(SP)+,R2
        MOVB R2,(R0)
VALJ:   JMP @#OPERAT
ERVALS: JMP @#ERRSX5
ERVALA: JMP @#ERRARG
VALFNE:
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FUNCTION: STR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
STRFN:  JSR PC,@#EVAL
        BCS ERSTRA
        CMPB(R1)+,#.RPRN
        BNE ERSTRS
        MOV #000020,-(SP)
        MOV R5,R2
        JSR PC,@#MAKEST
        MOV(SP),R3
        ADD #000003,R3
        MOV R3,T2(R5)
        CLR T1(R5)
        JSR PC,@#NUMSGN
        .WORD SAVCHA
        MOV SP,R2
        MOV T1(R5),-(SP)
        JSR PC,@#MAKEST
        MOV(SP)+,(SP)
        JMP @#QUOTBM
ERSTRA: JMP @#ERRARG
ERSTRS: JMP @#ERRSX5
STRFNE:
	.ENDC
;
FNEND: 
USR:    .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD USRCOD
        .WORD USRLIN
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
RAND:   .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD TPBFH1
        .WORD KBBFH1
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
        .WORD 0
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;TELETYPE KEYBOARD BUFFER
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
KBBFH1: .WORD KBBUF1
        .WORD KBBEN1
        .WORD KBBUF1
        .WORD KBBUF1
        .WORD KBBUF1
        .WORD 0
KBBUF1=.
.=.+$KBBSZ
KBBEN1=.-1
        .EVEN
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;TELETYPE PRINTER BUFFER
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TPBFH1: .WORD TPBUF1
        .WORD TPBEN1
        .WORD 0
        .WORD TPBUF1
        .WORD TPBUF1
        .WORD 0
TPBUF1=.
.=.+$TPBSZ
TPBEN1=.-1
        .EVEN
;
USRLIN: 
.=.+$ULNSP
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ONCE ONLY INIT CODE
; SIZE CORE AND EXPAND USERAREA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
USRCOD: 
;MEMORY TRAP FOR SIZING CORE
DECCOR: SUB #17776,R4	;SUBTRACT 8K FROM CORE SIZE
        CMP(SP)+,(SP)+	;CLEAN UP STACK
        BR TRYCOR
ONCEON: RESET
        MOV #TMPSTK,SP
        JSR PC,IFPMP	;INITIALIZE FLOATING POINT
        MOV #DECCOR,@#4	;SET BUS TIMEOUT TRAP
        MOV #156000,R4	;TOP OF CORE (LEAVE SPACE FOR ABSLDR)
TRYCOR: TST -(R4)	;TEST CORE
        MOV #6,@#4	;RESTORE TRAP ADDRESS
        MOV R4,HICORE	;SAVE CORE LIMIT
        MOV #RNDLFN,R1
;INITIALIZE USER FUNCTIONS
INIHDR: JSR R3,PRTMSG	;PRINT MESSAGE
        .BYTE 15,12
        .ASCII 'BASIC V001A'
        .BYTE 15,12
        .ASCII 'OPT FNS:  A-ALL, N-NONE, I-IND'
        .BYTE 15,12
        .ASCII '?'
        .BYTE 0
        .EVEN
        JSR PC,RDANSR	;GET RESPONSE
        CMPB R0,#116	;CHECK FOR NO
        BEQ INISAV
        CLR R2		;CLEAR 'ALL' FLAG
        CMPB R0,#101	;CHECK FOR YES
        BNE INITI
        INC R2		;SET 'ALL' FLAG
        BR INIALL
INITI:  CMPB R0,#111	;CHECK FOR I
        BNE INIHDR
;PRINT HEADING FOR INDIVIDUAL FUNCTIONS
        JSR R3,PRTMSG
        .BYTE 15,12,12
        .ASCII ' Y-YES  N-NO'
        .BYTE 0
        .EVEN
INIALL: MOV #FNTABL,R5
        MOV #TABLE5,R4
;GET NEXT FUNCTION TABLE ADDRESS
INILP:  MOV(R5),R3
        BPL INIFN
        ADD #2,R5	;SKIP OVER FUNCTION
        ADD #2,R4
        BR INILP
;PRINT QUESTION FOR FUNCTION, GET ANSWER
INIFN:  CMP R4,#TBL5EN
        BHI INISAV
        CMP R5,#FNTABE
        BCC INISAV
        TST R2
        BNE INIDF
        MOV 4(R5),FNNAM1
        MOV 6(R5),FNNAM2
        JSR R3,PRTMSG
        .BYTE 15,12
FNNAM1: .WORD 0
FNNAM2: .WORD 0
        .ASCII ' :  '
        .BYTE 0
        .EVEN
        JSR PC,RDANSR
        CMPB R0,#116	;CHECK FOR NO
        BNE INITY
        TST(R4)+
        BR ININXT
INITY:  CMPB R0,#131	;CHECK FOR YES
        BNE INIFN
;DEFINE THE FUNCTION
INIDF:  MOV R1,R0
        SUB #TABLE5,R0
        MOV R0,(R4)+	;PLACE ADDRESS IN TABLE
INIMV:  MOV(R3)+,(R1)+
        CMP R3,2(R5)
        BCS INIMV
ININXT: ADD #10,R5
        CMP R4,#TBL5EN
        BLOS INILP
;SAVE TOP OF BASIC
;MOVE USER AREA TO TOP OF BASIC
INISAV: MOV R1,USRARE
        MOV #FNEND,R2
        MOV R2,R3	;COMPUTE RELOCATION CONSTANT
        SUB R1,R3
MOVLP:  CMP R2,#DECCOR
        BCC MOVDON
        MOV(R2)+,(R1)+
        BEQ MOVLP
        SUB R3,-(R1)	;RELOCATE NON-ZERO ENTRIES
        TST(R1)+
        BR MOVLP
MOVDON:
;INITIALIZE USER AREA
	MOV HICORE,R4		;TOP OF CORE
        SUB #10,R4		;RESERVE SPACE
        MOV USRARE,R5		;POINT TO USER AREA
        MOV R4,LIMIT(R5)	;SET LIMIT
        SUB #134,R4		;RESERVE SPACE
        MOV R4,PDL(R5)		;SET BASE OF STACK
        SUB #200,R4		;MAX STACK SIZE
        MOV R4,ARRAYS(R5)	;HIGHEST ARRAY STORAGE LOCATION
        ADD #40,R4
        MOV R4,PDSIZE(R5)
        MOV #32331,RND1(R5)	;RANDOM SEED
        MOV #163251,RND2(R5)
;DIALOG TO SETUP TERMINAL
ASKPAD: JSR R3,PRTMSG
        .BYTE 15,12,12
        .ASCII 'NUMBER OF PAD '
        .ASCII 'CHARACTERS NEEDED?'
        .BYTE 0
        .EVEN
        JSR PC,RDANSR		;GET ANSWER
        SUB #60,R0		;SUB ASCII BIAS
        BCS ASKPAD		;BAD ANSWER
        CMPB R0,#11		;TOO BIG?
        BHI ASKPAD
        CLRB FILLCO(R5)		;CLEAR COUNTER
        MOVB R0,FILLNO(R5)	;SAVE FILL COUNT
        BEQ FILLDO
ASKFIL: JSR R3,PRTMSG
        .BYTE 15,12
        .ASCII 'CHARACTER REQUIRING FILL?'
        .BYTE 0
        .EVEN
        JSR PC,RDDECM		;GET DECIMAL ANSWER
        BCS ASKFIL
        TST R0			;NULL?
        BEQ ASKFIL
        CMP #200,R0		;TOO BIG?
        BLOS ASKFIL
        MOVB R0,FILLCH(R5)	;SAVE CHAR NEEDING FILL
;PRINT OUT IF USER FUNCTIONS LOADED
FILLDO: TST @#46
        BEQ NOUSRF
        JSR R3,PRTMSG
        .BYTE 15,12,12
        .ASCII 'USER FNS LOADED'
        .BYTE 0
        .EVEN
NOUSRF: JSR R3,PRTMSG
        .BYTE 15,12,12,0
        .EVEN
;CHECK IF RNDL LOADED
        MOV #TABLE5,R2
        MOV(R2)+,R3
        BEQ NORAND
        ADD #RNDFN-RNDLFN,R3
        MOV R3,(R2)	;DEFINE RND ALSO
NORAND: JMP START
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SUBROUTINE TO PRINT A MESSAGE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PRTMSG: MOV R3,R0
PRLOOP: TSTB @#TPS
        BPL PRLOOP
        MOVB(R0)+,@#TPB
        BNE PRLOOP
        MOV R0,R3
        INC R3
        ASR R3
        ASL R3
        RTS R3
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SUBROUTINE TO READ ANSWER FROM TTY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RDANSR: INC RAND
        TSTB @#TKS
        BPL RDANSR
        MOVB @#TKB,R0
        BIC #177600,R0
ECHOIT: MOV R0,CHBUFF
        JSR R3,PRTMSG
CHBUFF: .WORD 0
        MOV CHBUFF,R0
        RTS PC
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;READ DECIMAL ANSWER FROM TTY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RDDECM: MOV R3,-(SP)
        CLR R3
RDDLOP: JSR PC,RDANSR	;GET DIGIT
        CMP #CRET,R0	;RETURN?
        BEQ RDDXIT
        SUB #'0,R0	;REMOVE ASCII BIAS
        BCS ERRDDA
        CMP #11,R0	;TOO LARGE?
        BCS ERRDDA
        ADD R3,R3	;MULT RESULT BY 10
        MOV R3,-(SP)
        ADD R3,R3
        ADD R3,R3
        ADD(SP)+,R3
        ADD R0,R3	;ADD TO RESULT
        BR RDDLOP
ERRDDA: SEC
RDDXIT: MOV R3,R0
        MOV(SP)+,R3
        RTS PC
;
.=.+40
TMPSTK: 
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FNTABL: .WORD RNDLFN  ;RNDL
        .WORD RNDFNE
        .ASCII 'RND '
        .WORD 177777  ;RND
        .WORD 177777  ;SIN
        .WORD 177777  ;COS
        .WORD 177777  ;SQR
        .WORD 177777  ;ATN
        .WORD 177777  ;EXP
        .WORD 177777  ;LOG
        .WORD PEEKFN  ;PEEK
        .WORD PEKFNE
        .ASCII 'PEEK'
        .WORD FREFN   ;FRE
        .WORD FREFNE
        .ASCII 'FREE'
        .WORD ABSFN   ;ABS
        .WORD ABSFNE
        .ASCII 'ABS '
        .WORD 177777
        .WORD SGNFN   ;SGN
        .WORD SGNFNE
        .ASCII 'SGN '
;
	.IFNDF $NOSTR
        .WORD TABFN   ;TAB
        .WORD TABFNE
        .ASCII 'TAB '
	.ENDC
;
	.IFDF $NOSTR
	.WORD 177777
	.ENDC
;
	.IFNDF $NOSTR
        .WORD LENFN   ;LEN
        .WORD LENFNE
        .ASCII 'LEN '
        .WORD ASCFN   ;ASC
        .WORD ASCFNE
        .ASCII 'ASC '
        .WORD CHR$FN  ;CHR
        .WORD CHRFNE
        .ASCII 'CHR$'
        .WORD POSFN   ;POS
        .WORD POSFNE
        .ASCII 'POS '
        .WORD SEGFN   ;SEG
        .WORD SEGFNE
        .ASCII 'SEG$'
        .WORD VALFN   ;VAL
        .WORD VALFNE
        .ASCII 'VAL '
        .WORD STRFN   ;STR
        .WORD STRFNE
        .ASCII 'STR$'
	.ENDC
;
FNTABE:
;
        .END ONCEON
